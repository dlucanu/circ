***(

  Operational goal example:
  - proving associativity, commutativity and identity for streams addition.
  The definition of streams, with visible data a ring, is inspired from

    J. J. M. M. Rutten. 
    A coinductive calculus of streams.    Mathematical Structures in Computer Science, 15(1):93-147, 2005.

   The example is studied in

   G. Grigorasü and D. L. G. Caltais, E. Goriac.
   Automated proving of the behavioral attributes.
   Proceedings of the 4th Balkan Conference in Informatics (BCIÕ09), 
   IEEE Computer Society, 2009.
)

---(set show details on .)

(theory RING is 
  sort Data .
  ops 0 1 : -> Data .
  op _+_ : Data Data -> Data [prec 33 assoc comm] .
  op -_ : Data -> Data .
  op _*_ : Data Data -> Data [prec 31 assoc comm] .

  var D D1 D2 : Data .

  eq D * 1 = D .
  eq D * (D1 + D2) = D * D1 + D * D2 .
  eq D * 0 = 0 .
  eq D + (- D) = 0 .
  eq D + 0 = D .
  eq (- 1) * D = - D .
endtheory)


(theory RINGSTREAM is
  including  RING .
  including BOOL .
  sort Stream .

  var S1 S2 : Stream .

  --- basic behavioral operations
  op hd : Stream -> Data .
  op tl : Stream -> Stream .

  --- summing operator
  op _+_ : Stream Stream -> Stream .
  eq hd(S1 + S2) = hd(S1) + hd(S2) .
  eq tl(S1 + S2) = tl(S1) + tl(S2) .

  --- identity element
  op zero : -> Stream .
  eq hd(zero) = 0 .
  eq tl(zero) = zero .
 
  --- derivatives
  der hd(*:Stream) .
  der tl(*:Stream) .
endtheory)

(initialize .)

(set show proved properties off .)

(add goal (op _+_ : Stream Stream -> Stream [assoc comm id: zero] .) . )
(coinduction .)

(show last proof .)
